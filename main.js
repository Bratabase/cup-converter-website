// Connect using the default host: https://api.bratabase.com
var api = BratabaseAPI();

function errHandler(err) {
    alert(err.responseJSON.message);
}

function populateBrands(elm, brands) {
    // This function receives a Jquery selector for a <select> element and
    // a API collection of brands from the API. Will create an <option>
    // for each.
    var opts = brands.map(function(brandTup){
        return $('<option value="'+ brandTup.href +'">').text(brandTup.name);
    })
    // First we clear the <select> and add a placeholder "Pick a brand" as
    // first element.
    elm.empty().append($('<option value="">').text("Pick a brand")).append(opts);
    // Finally enable the element. It started disabled on the HTML markup
    elm.prop('disabled', false);
}

function buildRow(pair) {
    // Given a 3-pair generated by _.zip it creates a <tr> row for each element.
    // These will be used to populate the bands and cups tables.
    var row = $('<tr>');
    row.append($('<td>').text(pair[0]));
    row.append($('<td>').text(pair[1]));
    row.append($('<td>').text(pair[2]));
    return row;
}

var CupConverter = {
    init: function(api){
        this.api = api;
        // Initialize by getting a handle for the needed elements on the page
        this.rightSelect = $('#right-brand');
        this.leftSelect = $('#left-brand');
        this.results = $('#results');
        this.cupsTable = $('#cups-table');
        this.bandsTable = $('#bands-table');
        this.bratabaseLink = $('#bratabase-link');

        // Bind the events so something happen when brands are selected
        this.bindEvents();

        return this;
    },
    startUp: function(){
        // This function starts communications with the remote API.

        // Stupid trick we need to use so we can refer to CupConverter(this)
        // inwide the callbacks below
        var self = this;
        api.root().then(function(root){
            // Follow the root links for the brands' collection
            // http://developers.bratabase.com/brands-endpoint/
            root.links.brands().then(function(brands){
                // We pass each <select> and the collection of brands to
                // populateBrands so it is possible to select a brand.
                populateBrands(self.leftSelect, brands.collection);
                populateBrands(self.rightSelect, brands.collection);
            });
        });
    },
    bindEvents: function(){
        // Here, we want to bind a `change` event for each of the <select>
        // elements, if the other select also has a value, then we perform
        // the comparison.

        var self = this;

        function compare(){
            // This function performs the comparison relying in both brands
            self.results.fadeOut('fast'); // Hide results temporarily

            // Obtain the API comparison results and construct then tables
            self.compareBrands().then(function(comparison){
                self.buildTable(comparison.body);
                self.results.fadeIn('fast'); // Show again when reconstructed
            }, errHandler);
        }

        // For both select elements, when changed, verify that the other has
        // a selection, if so, fo the compare.
        this.leftSelect.on('change', function(){
            if (self.rightSelect.val()){
                compare();
            }
        });
        this.rightSelect.on('change', function(){
            if (self.leftSelect.val()){
                compare();
            }
        });
    },
    buildTable: function(comparison){
        // Constructs the tables for bands and cups.

        var cups = comparison.cups;
        var bands = comparison.bands;

        // The brand's names are on the selected <option> on each <select>
        var brandNames = [
            this.leftSelect.find('option:selected').text(),
            this.rightSelect.find('option:selected').text()
        ]

        // Construct the cups' table
        // First a header row
        var cupHead = $('<tr>');
        cupHead.append($('<th>').text('Cups').addClass('table-title'));
        cupHead.append($('<th>').text(brandNames[0]));
        cupHead.append($('<th>').text(brandNames[1]));
        // Then the rows for each of the cup indexes
        var cupRows = _.union([cupHead], _.zip(cups.all_indexes, cups.brand_1, cups.brand_2).map(function(pair){
            return buildRow(pair);  // Here the "pair" has 3 elements
        }));

        // Construct the bands' table, same drill as the cups
        var bandHead = $('<tr>');
        bandHead.append($('<th>').text('Bands').addClass('table-title'));
        bandHead.append($('<th>').text(brandNames[0]));
        bandHead.append($('<th>').text(brandNames[1]));
        var bandRows = _.union([bandHead], _.zip(bands.all_bands, bands.brand_1, bands.brand_2).map(function(pair){
            return buildRow(pair);
        }));

        // Add the <tr>s to the <table> elements
        this.cupsTable.empty().append(cupRows);
        this.bandsTable.empty().append(bandRows);

        // And add the URL for the link on Bratabase.com
        this.bratabaseLink.attr('href', comparison.bratabase_url);
    },
    compareBrands: function(){
        // Follow the API and obtain the comparison endpoint
        // http://developers.bratabase.com/brand-sizing-compare/
        var leftBrandUrl = this.leftSelect.val();
        var rightBrandUrl = this.rightSelect.val();

        // Follow the brand, then follow the sizing
        return this.api.get(leftBrandUrl).then(function(leftBrand){
            return leftBrand.links.sizing().then(function(sizing){
                // Fetch the compare endpoint passing the right brand
                // as the `brand` parameter.

                // Return the promise with this value to construct the final
                // tables
                return sizing.links.compare({
                    brand: rightBrandUrl
                });
            });
        }, errHandler);
    }
}


var converter = CupConverter.init(api);
converter.startUp();
